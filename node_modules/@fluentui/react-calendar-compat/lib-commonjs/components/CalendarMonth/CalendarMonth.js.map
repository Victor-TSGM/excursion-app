{"version":3,"sources":["CalendarMonth.js"],"sourcesContent":["import * as React from 'react';\nimport { Enter } from '@fluentui/keyboard-keys';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\nimport { mergeClasses } from '@griffel/react';\nimport { addYears, compareDatePart, getMonthEnd, getMonthStart, getYearEnd, getYearStart, setMonth, DEFAULT_DATE_FORMATTING } from '../../utils';\nimport { CalendarYear } from '../CalendarYear/CalendarYear';\nimport { useCalendarMonthStyles_unstable } from './useCalendarMonthStyles';\nconst MONTHS_PER_ROW = 4;\nfunction useAnimateBackwards({ navigatedDate }) {\n    const currentYear = navigatedDate.getFullYear();\n    const previousYearRef = React.useRef();\n    React.useEffect(()=>{\n        previousYearRef.current = currentYear;\n    });\n    const previousYear = previousYearRef.current;\n    if (previousYear === undefined || previousYear === currentYear) {\n        return undefined;\n    } else {\n        return previousYear > currentYear;\n    }\n}\nfunction useFocusLogic({ componentRef }) {\n    const navigatedMonthRef = React.useRef(null);\n    const calendarYearRef = React.useRef(null);\n    const focusOnUpdate = React.useRef(false);\n    const focus = React.useCallback(()=>{\n        if (calendarYearRef.current) {\n            calendarYearRef.current.focus();\n        } else if (navigatedMonthRef.current) {\n            navigatedMonthRef.current.focus();\n        }\n    }, []);\n    React.useImperativeHandle(componentRef, ()=>({\n            focus\n        }), [\n        focus\n    ]);\n    React.useEffect(()=>{\n        if (focusOnUpdate.current) {\n            focus();\n            focusOnUpdate.current = false;\n        }\n    });\n    const focusOnNextUpdate = ()=>{\n        focusOnUpdate.current = true;\n    };\n    return [\n        navigatedMonthRef,\n        calendarYearRef,\n        focusOnNextUpdate\n    ];\n}\n/**\n * @internal\n */ export const CalendarMonth = (props)=>{\n    const { allFocusable, animationDirection, className, componentRef, dateTimeFormatter = DEFAULT_DATE_FORMATTING, highlightCurrentMonth, highlightSelectedMonth, maxDate, minDate, navigatedDate, navigationIcons, onHeaderSelect: onUserHeaderSelect, onNavigateDate, selectedDate, strings, today = new Date(), yearPickerHidden = false } = props;\n    const [navigatedMonthRef, calendarYearRef, focusOnNextUpdate] = useFocusLogic({\n        componentRef\n    });\n    const [isYearPickerVisible, setIsYearPickerVisible] = React.useState(false);\n    const animateBackwards = useAnimateBackwards({\n        navigatedDate\n    });\n    const selectMonthCallback = (newMonth)=>{\n        return ()=>onSelectMonth(newMonth);\n    };\n    const onSelectNextYear = ()=>{\n        onNavigateDate(addYears(navigatedDate, 1), false);\n    };\n    const onSelectPrevYear = ()=>{\n        onNavigateDate(addYears(navigatedDate, -1), false);\n    };\n    const onSelectMonth = (newMonth)=>{\n        // If header is clickable the calendars are overlayed, switch back to day picker when month is clicked\n        onUserHeaderSelect === null || onUserHeaderSelect === void 0 ? void 0 : onUserHeaderSelect();\n        onNavigateDate(setMonth(navigatedDate, newMonth), true);\n    };\n    const onHeaderSelect = ()=>{\n        if (!yearPickerHidden) {\n            focusOnNextUpdate();\n            setIsYearPickerVisible(true);\n        } else {\n            onUserHeaderSelect === null || onUserHeaderSelect === void 0 ? void 0 : onUserHeaderSelect();\n        }\n    };\n    const onSelectYear = (selectedYear)=>{\n        focusOnNextUpdate();\n        const navYear = navigatedDate.getFullYear();\n        if (navYear !== selectedYear) {\n            let newNavigationDate = new Date(navigatedDate.getTime());\n            newNavigationDate.setFullYear(selectedYear);\n            // for min and max dates, adjust the new navigation date - perhaps this should be\n            // checked on the master navigation date handler (i.e. in Calendar)\n            if (maxDate && newNavigationDate > maxDate) {\n                newNavigationDate = setMonth(newNavigationDate, maxDate.getMonth());\n            } else if (minDate && newNavigationDate < minDate) {\n                newNavigationDate = setMonth(newNavigationDate, minDate.getMonth());\n            }\n            onNavigateDate(newNavigationDate, true);\n        }\n        setIsYearPickerVisible(false);\n    };\n    const onYearPickerHeaderSelect = (focus)=>{\n        focusOnNextUpdate();\n        setIsYearPickerVisible(false);\n    };\n    const dateFormatter = dateTimeFormatter;\n    // determine if previous/next years are in bounds\n    const isPrevYearInBounds = minDate ? compareDatePart(minDate, getYearStart(navigatedDate)) < 0 : true;\n    const isNextYearInBounds = maxDate ? compareDatePart(getYearEnd(navigatedDate), maxDate) < 0 : true;\n    const classNames = useCalendarMonthStyles_unstable({\n        className,\n        hasHeaderClickCallback: !!onUserHeaderSelect || !yearPickerHidden,\n        highlightCurrent: highlightCurrentMonth,\n        highlightSelected: highlightSelectedMonth,\n        animateBackwards,\n        animationDirection\n    });\n    const arrowNavigationAttributes = useArrowNavigationGroup({\n        axis: 'grid'\n    });\n    if (isYearPickerVisible) {\n        const [onRenderYear, yearStrings] = getYearStrings({\n            dateTimeFormatter,\n            navigatedDate,\n            strings\n        });\n        // use navigated date for the year picker\n        return /*#__PURE__*/ React.createElement(CalendarYear, {\n            key: 'calendarYear',\n            minYear: minDate ? minDate.getFullYear() : undefined,\n            maxYear: maxDate ? maxDate.getFullYear() : undefined,\n            // eslint-disable-next-line react/jsx-no-bind\n            onSelectYear: onSelectYear,\n            // eslint-disable-next-line react/jsx-no-bind\n            onHeaderSelect: onYearPickerHeaderSelect,\n            selectedYear: selectedDate ? selectedDate.getFullYear() : navigatedDate ? navigatedDate.getFullYear() : undefined,\n            navigatedYear: navigatedDate.getFullYear(),\n            navigationIcons: navigationIcons,\n            onRenderYear: onRenderYear,\n            strings: yearStrings,\n            componentRef: calendarYearRef,\n            highlightCurrentYear: highlightCurrentMonth,\n            highlightSelectedYear: highlightSelectedMonth,\n            animationDirection: animationDirection\n        });\n    }\n    const rowIndexes = [];\n    for(let i = 0; i < strings.shortMonths.length / MONTHS_PER_ROW; i++){\n        rowIndexes.push(i);\n    }\n    const yearString = dateFormatter.formatYear(navigatedDate);\n    const headerAriaLabel = strings.monthPickerHeaderAriaLabel ? strings.monthPickerHeaderAriaLabel.replace('{0}', yearString) : yearString;\n    return /*#__PURE__*/ React.createElement(\"div\", {\n        className: classNames.root\n    }, /*#__PURE__*/ React.createElement(\"div\", {\n        className: classNames.headerContainer\n    }, /*#__PURE__*/ React.createElement(\"button\", {\n        className: classNames.currentItemButton,\n        onClick: onHeaderSelect,\n        onKeyDown: onButtonKeyDown(onHeaderSelect),\n        \"aria-label\": headerAriaLabel,\n        tabIndex: !!onUserHeaderSelect || !yearPickerHidden ? 0 : -1,\n        type: \"button\"\n    }, /*#__PURE__*/ React.createElement(\"span\", {\n        \"aria-live\": \"polite\",\n        \"aria-atomic\": \"true\"\n    }, yearString)), /*#__PURE__*/ React.createElement(\"div\", {\n        className: classNames.navigationButtonsContainer\n    }, /*#__PURE__*/ React.createElement(\"button\", {\n        className: mergeClasses(classNames.navigationButton, !isPrevYearInBounds && classNames.disabled),\n        \"aria-disabled\": !isPrevYearInBounds,\n        tabIndex: isPrevYearInBounds ? undefined : allFocusable ? 0 : -1,\n        onClick: isPrevYearInBounds ? onSelectPrevYear : undefined,\n        onKeyDown: isPrevYearInBounds ? onButtonKeyDown(onSelectPrevYear) : undefined,\n        title: strings.prevYearAriaLabel ? strings.prevYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, -1)) : undefined,\n        type: \"button\"\n    }, navigationIcons.upNavigation), /*#__PURE__*/ React.createElement(\"button\", {\n        className: mergeClasses(classNames.navigationButton, !isNextYearInBounds && classNames.disabled),\n        \"aria-disabled\": !isNextYearInBounds,\n        tabIndex: isNextYearInBounds ? undefined : allFocusable ? 0 : -1,\n        onClick: isNextYearInBounds ? onSelectNextYear : undefined,\n        onKeyDown: isNextYearInBounds ? onButtonKeyDown(onSelectNextYear) : undefined,\n        title: strings.nextYearAriaLabel ? strings.nextYearAriaLabel + ' ' + dateFormatter.formatYear(addYears(navigatedDate, 1)) : undefined,\n        type: \"button\"\n    }, navigationIcons.downNavigation))), /*#__PURE__*/ React.createElement(\"div\", {\n        ...arrowNavigationAttributes,\n        className: classNames.gridContainer,\n        role: \"grid\",\n        \"aria-label\": yearString\n    }, rowIndexes.map((rowNum)=>{\n        const monthsForRow = strings.shortMonths.slice(rowNum * MONTHS_PER_ROW, (rowNum + 1) * MONTHS_PER_ROW);\n        return /*#__PURE__*/ React.createElement(\"div\", {\n            key: 'monthRow_' + rowNum + navigatedDate.getFullYear(),\n            role: \"row\",\n            className: classNames.buttonRow\n        }, monthsForRow.map((month, index)=>{\n            const monthIndex = rowNum * MONTHS_PER_ROW + index;\n            const indexedMonth = setMonth(navigatedDate, monthIndex);\n            const isNavigatedMonth = navigatedDate.getMonth() === monthIndex;\n            const isSelectedMonth = selectedDate.getMonth() === monthIndex;\n            const isSelectedYear = selectedDate.getFullYear() === navigatedDate.getFullYear();\n            const isInBounds = (minDate ? compareDatePart(minDate, getMonthEnd(indexedMonth)) < 1 : true) && (maxDate ? compareDatePart(getMonthStart(indexedMonth), maxDate) < 1 : true);\n            return /*#__PURE__*/ React.createElement(\"button\", {\n                ref: isNavigatedMonth ? navigatedMonthRef : undefined,\n                role: 'gridcell',\n                className: mergeClasses(classNames.itemButton, highlightCurrentMonth && isCurrentMonth(monthIndex, navigatedDate.getFullYear(), today) && classNames.current, highlightSelectedMonth && isSelectedMonth && isSelectedYear && classNames.selected, !isInBounds && classNames.disabled),\n                disabled: !allFocusable && !isInBounds,\n                key: monthIndex,\n                onClick: isInBounds ? selectMonthCallback(monthIndex) : undefined,\n                onKeyDown: isInBounds ? onButtonKeyDown(selectMonthCallback(monthIndex)) : undefined,\n                \"aria-label\": dateFormatter.formatMonth(indexedMonth, strings),\n                \"aria-selected\": isNavigatedMonth,\n                tabIndex: isInBounds ? 0 : -1,\n                type: \"button\"\n            }, month);\n        }));\n    })));\n};\nCalendarMonth.displayName = 'CalendarMonth';\nfunction getYearStrings({ dateTimeFormatter, navigatedDate, strings }) {\n    const yearToString = (year)=>{\n        if (dateTimeFormatter) {\n            // create a date based on the current nav date\n            const yearFormattingDate = new Date(navigatedDate.getTime());\n            yearFormattingDate.setFullYear(year);\n            return dateTimeFormatter.formatYear(yearFormattingDate);\n        }\n        return String(year);\n    };\n    const yearRangeToString = (yearRange)=>{\n        return `${yearToString(yearRange.fromYear)} - ${yearToString(yearRange.toYear)}`;\n    };\n    const yearRangeToNextDecadeLabel = (yearRange)=>{\n        return strings.nextYearRangeAriaLabel ? `${strings.nextYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n    };\n    const yearRangeToPrevDecadeLabel = (yearRange)=>{\n        return strings.prevYearRangeAriaLabel ? `${strings.prevYearRangeAriaLabel} ${yearRangeToString(yearRange)}` : '';\n    };\n    return [\n        yearToString,\n        {\n            rangeAriaLabel: yearRangeToString,\n            prevRangeAriaLabel: yearRangeToPrevDecadeLabel,\n            nextRangeAriaLabel: yearRangeToNextDecadeLabel,\n            headerAriaLabelFormatString: strings.yearPickerHeaderAriaLabel\n        }\n    ];\n}\nfunction isCurrentMonth(month, year, today) {\n    return today.getFullYear() === year && today.getMonth() === month;\n}\nfunction onButtonKeyDown(callback) {\n    return (ev)=>{\n        switch(ev.key){\n            case Enter:\n                callback();\n                break;\n        }\n    };\n}\n"],"names":["CalendarMonth","MONTHS_PER_ROW","useAnimateBackwards","navigatedDate","currentYear","getFullYear","previousYearRef","React","useRef","useEffect","current","previousYear","undefined","useFocusLogic","componentRef","navigatedMonthRef","calendarYearRef","focusOnUpdate","focus","useCallback","useImperativeHandle","focusOnNextUpdate","props","allFocusable","animationDirection","className","dateTimeFormatter","DEFAULT_DATE_FORMATTING","highlightCurrentMonth","highlightSelectedMonth","maxDate","minDate","navigationIcons","onHeaderSelect","onUserHeaderSelect","onNavigateDate","selectedDate","strings","today","Date","yearPickerHidden","isYearPickerVisible","setIsYearPickerVisible","useState","animateBackwards","selectMonthCallback","newMonth","onSelectMonth","onSelectNextYear","addYears","onSelectPrevYear","setMonth","onSelectYear","selectedYear","navYear","newNavigationDate","getTime","setFullYear","getMonth","onYearPickerHeaderSelect","dateFormatter","isPrevYearInBounds","compareDatePart","getYearStart","isNextYearInBounds","getYearEnd","classNames","useCalendarMonthStyles_unstable","hasHeaderClickCallback","highlightCurrent","highlightSelected","arrowNavigationAttributes","useArrowNavigationGroup","axis","onRenderYear","yearStrings","getYearStrings","createElement","CalendarYear","key","minYear","maxYear","navigatedYear","highlightCurrentYear","highlightSelectedYear","rowIndexes","i","shortMonths","length","push","yearString","formatYear","headerAriaLabel","monthPickerHeaderAriaLabel","replace","root","headerContainer","currentItemButton","onClick","onKeyDown","onButtonKeyDown","tabIndex","type","navigationButtonsContainer","mergeClasses","navigationButton","disabled","title","prevYearAriaLabel","upNavigation","nextYearAriaLabel","downNavigation","gridContainer","role","map","rowNum","monthsForRow","slice","buttonRow","month","index","monthIndex","indexedMonth","isNavigatedMonth","isSelectedMonth","isSelectedYear","isInBounds","getMonthEnd","getMonthStart","ref","itemButton","isCurrentMonth","selected","formatMonth","displayName","yearToString","year","yearFormattingDate","String","yearRangeToString","yearRange","fromYear","toYear","yearRangeToNextDecadeLabel","nextYearRangeAriaLabel","yearRangeToPrevDecadeLabel","prevYearRangeAriaLabel","rangeAriaLabel","prevRangeAriaLabel","nextRangeAriaLabel","headerAriaLabelFormatString","yearPickerHeaderAriaLabel","callback","ev","Enter"],"mappings":";;;;+BAsDiBA;;;eAAAA;;;;iEAtDM;8BACD;8BACkB;wBACX;uBACsG;8BACtG;wCACmB;AAChD,MAAMC,iBAAiB;AACvB,SAASC,oBAAoB,EAAEC,aAAa,EAAE;IAC1C,MAAMC,cAAcD,cAAcE,WAAW;IAC7C,MAAMC,kBAAkBC,OAAMC,MAAM;IACpCD,OAAME,SAAS,CAAC;QACZH,gBAAgBI,OAAO,GAAGN;IAC9B;IACA,MAAMO,eAAeL,gBAAgBI,OAAO;IAC5C,IAAIC,iBAAiBC,aAAaD,iBAAiBP,aAAa;QAC5D,OAAOQ;IACX,OAAO;QACH,OAAOD,eAAeP;IAC1B;AACJ;AACA,SAASS,cAAc,EAAEC,YAAY,EAAE;IACnC,MAAMC,oBAAoBR,OAAMC,MAAM,CAAC;IACvC,MAAMQ,kBAAkBT,OAAMC,MAAM,CAAC;IACrC,MAAMS,gBAAgBV,OAAMC,MAAM,CAAC;IACnC,MAAMU,QAAQX,OAAMY,WAAW,CAAC;QAC5B,IAAIH,gBAAgBN,OAAO,EAAE;YACzBM,gBAAgBN,OAAO,CAACQ,KAAK;QACjC,OAAO,IAAIH,kBAAkBL,OAAO,EAAE;YAClCK,kBAAkBL,OAAO,CAACQ,KAAK;QACnC;IACJ,GAAG,EAAE;IACLX,OAAMa,mBAAmB,CAACN,cAAc,IAAK,CAAA;YACrCI;QACJ,CAAA,GAAI;QACJA;KACH;IACDX,OAAME,SAAS,CAAC;QACZ,IAAIQ,cAAcP,OAAO,EAAE;YACvBQ;YACAD,cAAcP,OAAO,GAAG;QAC5B;IACJ;IACA,MAAMW,oBAAoB;QACtBJ,cAAcP,OAAO,GAAG;IAC5B;IACA,OAAO;QACHK;QACAC;QACAK;KACH;AACL;AAGW,MAAMrB,gBAAgB,CAACsB;IAC9B,MAAM,EAAEC,YAAY,EAAEC,kBAAkB,EAAEC,SAAS,EAAEX,YAAY,EAAEY,oBAAoBC,8BAAuB,EAAEC,qBAAqB,EAAEC,sBAAsB,EAAEC,OAAO,EAAEC,OAAO,EAAE5B,aAAa,EAAE6B,eAAe,EAAEC,gBAAgBC,kBAAkB,EAAEC,cAAc,EAAEC,YAAY,EAAEC,OAAO,EAAEC,QAAQ,IAAIC,MAAM,EAAEC,mBAAmB,KAAK,EAAE,GAAGlB;IAC7U,MAAM,CAACP,mBAAmBC,iBAAiBK,kBAAkB,GAAGR,cAAc;QAC1EC;IACJ;IACA,MAAM,CAAC2B,qBAAqBC,uBAAuB,GAAGnC,OAAMoC,QAAQ,CAAC;IACrE,MAAMC,mBAAmB1C,oBAAoB;QACzCC;IACJ;IACA,MAAM0C,sBAAsB,CAACC;QACzB,OAAO,IAAIC,cAAcD;IAC7B;IACA,MAAME,mBAAmB;QACrBb,eAAec,IAAAA,eAAQ,EAAC9C,eAAe,IAAI;IAC/C;IACA,MAAM+C,mBAAmB;QACrBf,eAAec,IAAAA,eAAQ,EAAC9C,eAAe,CAAC,IAAI;IAChD;IACA,MAAM4C,gBAAgB,CAACD;QACnB,sGAAsG;QACtGZ,uBAAuB,QAAQA,uBAAuB,KAAK,IAAI,KAAK,IAAIA;QACxEC,eAAegB,IAAAA,eAAQ,EAAChD,eAAe2C,WAAW;IACtD;IACA,MAAMb,iBAAiB;QACnB,IAAI,CAACO,kBAAkB;YACnBnB;YACAqB,uBAAuB;QAC3B,OAAO;YACHR,uBAAuB,QAAQA,uBAAuB,KAAK,IAAI,KAAK,IAAIA;QAC5E;IACJ;IACA,MAAMkB,eAAe,CAACC;QAClBhC;QACA,MAAMiC,UAAUnD,cAAcE,WAAW;QACzC,IAAIiD,YAAYD,cAAc;YAC1B,IAAIE,oBAAoB,IAAIhB,KAAKpC,cAAcqD,OAAO;YACtDD,kBAAkBE,WAAW,CAACJ;YAC9B,iFAAiF;YACjF,mEAAmE;YACnE,IAAIvB,WAAWyB,oBAAoBzB,SAAS;gBACxCyB,oBAAoBJ,IAAAA,eAAQ,EAACI,mBAAmBzB,QAAQ4B,QAAQ;YACpE,OAAO,IAAI3B,WAAWwB,oBAAoBxB,SAAS;gBAC/CwB,oBAAoBJ,IAAAA,eAAQ,EAACI,mBAAmBxB,QAAQ2B,QAAQ;YACpE;YACAvB,eAAeoB,mBAAmB;QACtC;QACAb,uBAAuB;IAC3B;IACA,MAAMiB,2BAA2B,CAACzC;QAC9BG;QACAqB,uBAAuB;IAC3B;IACA,MAAMkB,gBAAgBlC;IACtB,iDAAiD;IACjD,MAAMmC,qBAAqB9B,UAAU+B,IAAAA,sBAAe,EAAC/B,SAASgC,IAAAA,mBAAY,EAAC5D,kBAAkB,IAAI;IACjG,MAAM6D,qBAAqBlC,UAAUgC,IAAAA,sBAAe,EAACG,IAAAA,iBAAU,EAAC9D,gBAAgB2B,WAAW,IAAI;IAC/F,MAAMoC,aAAaC,IAAAA,uDAA+B,EAAC;QAC/C1C;QACA2C,wBAAwB,CAAC,CAAClC,sBAAsB,CAACM;QACjD6B,kBAAkBzC;QAClB0C,mBAAmBzC;QACnBe;QACApB;IACJ;IACA,MAAM+C,4BAA4BC,IAAAA,qCAAuB,EAAC;QACtDC,MAAM;IACV;IACA,IAAIhC,qBAAqB;QACrB,MAAM,CAACiC,cAAcC,YAAY,GAAGC,eAAe;YAC/ClD;YACAvB;YACAkC;QACJ;QACA,yCAAyC;QACzC,OAAO,WAAW,GAAG9B,OAAMsE,aAAa,CAACC,0BAAY,EAAE;YACnDC,KAAK;YACLC,SAASjD,UAAUA,QAAQ1B,WAAW,KAAKO;YAC3CqE,SAASnD,UAAUA,QAAQzB,WAAW,KAAKO;YAC3C,6CAA6C;YAC7CwC,cAAcA;YACd,6CAA6C;YAC7CnB,gBAAgB0B;YAChBN,cAAcjB,eAAeA,aAAa/B,WAAW,KAAKF,gBAAgBA,cAAcE,WAAW,KAAKO;YACxGsE,eAAe/E,cAAcE,WAAW;YACxC2B,iBAAiBA;YACjB0C,cAAcA;YACdrC,SAASsC;YACT7D,cAAcE;YACdmE,sBAAsBvD;YACtBwD,uBAAuBvD;YACvBL,oBAAoBA;QACxB;IACJ;IACA,MAAM6D,aAAa,EAAE;IACrB,IAAI,IAAIC,IAAI,GAAGA,IAAIjD,QAAQkD,WAAW,CAACC,MAAM,GAAGvF,gBAAgBqF,IAAI;QAChED,WAAWI,IAAI,CAACH;IACpB;IACA,MAAMI,aAAa9B,cAAc+B,UAAU,CAACxF;IAC5C,MAAMyF,kBAAkBvD,QAAQwD,0BAA0B,GAAGxD,QAAQwD,0BAA0B,CAACC,OAAO,CAAC,OAAOJ,cAAcA;IAC7H,OAAO,WAAW,GAAGnF,OAAMsE,aAAa,CAAC,OAAO;QAC5CpD,WAAWyC,WAAW6B,IAAI;IAC9B,GAAG,WAAW,GAAGxF,OAAMsE,aAAa,CAAC,OAAO;QACxCpD,WAAWyC,WAAW8B,eAAe;IACzC,GAAG,WAAW,GAAGzF,OAAMsE,aAAa,CAAC,UAAU;QAC3CpD,WAAWyC,WAAW+B,iBAAiB;QACvCC,SAASjE;QACTkE,WAAWC,gBAAgBnE;QAC3B,cAAc2D;QACdS,UAAU,CAAC,CAACnE,sBAAsB,CAACM,mBAAmB,IAAI,CAAC;QAC3D8D,MAAM;IACV,GAAG,WAAW,GAAG/F,OAAMsE,aAAa,CAAC,QAAQ;QACzC,aAAa;QACb,eAAe;IACnB,GAAGa,cAAc,WAAW,GAAGnF,OAAMsE,aAAa,CAAC,OAAO;QACtDpD,WAAWyC,WAAWqC,0BAA0B;IACpD,GAAG,WAAW,GAAGhG,OAAMsE,aAAa,CAAC,UAAU;QAC3CpD,WAAW+E,IAAAA,oBAAY,EAACtC,WAAWuC,gBAAgB,EAAE,CAAC5C,sBAAsBK,WAAWwC,QAAQ;QAC/F,iBAAiB,CAAC7C;QAClBwC,UAAUxC,qBAAqBjD,YAAYW,eAAe,IAAI,CAAC;QAC/D2E,SAASrC,qBAAqBX,mBAAmBtC;QACjDuF,WAAWtC,qBAAqBuC,gBAAgBlD,oBAAoBtC;QACpE+F,OAAOtE,QAAQuE,iBAAiB,GAAGvE,QAAQuE,iBAAiB,GAAG,MAAMhD,cAAc+B,UAAU,CAAC1C,IAAAA,eAAQ,EAAC9C,eAAe,CAAC,MAAMS;QAC7H0F,MAAM;IACV,GAAGtE,gBAAgB6E,YAAY,GAAG,WAAW,GAAGtG,OAAMsE,aAAa,CAAC,UAAU;QAC1EpD,WAAW+E,IAAAA,oBAAY,EAACtC,WAAWuC,gBAAgB,EAAE,CAACzC,sBAAsBE,WAAWwC,QAAQ;QAC/F,iBAAiB,CAAC1C;QAClBqC,UAAUrC,qBAAqBpD,YAAYW,eAAe,IAAI,CAAC;QAC/D2E,SAASlC,qBAAqBhB,mBAAmBpC;QACjDuF,WAAWnC,qBAAqBoC,gBAAgBpD,oBAAoBpC;QACpE+F,OAAOtE,QAAQyE,iBAAiB,GAAGzE,QAAQyE,iBAAiB,GAAG,MAAMlD,cAAc+B,UAAU,CAAC1C,IAAAA,eAAQ,EAAC9C,eAAe,MAAMS;QAC5H0F,MAAM;IACV,GAAGtE,gBAAgB+E,cAAc,KAAK,WAAW,GAAGxG,OAAMsE,aAAa,CAAC,OAAO;QAC3E,GAAGN,yBAAyB;QAC5B9C,WAAWyC,WAAW8C,aAAa;QACnCC,MAAM;QACN,cAAcvB;IAClB,GAAGL,WAAW6B,GAAG,CAAC,CAACC;QACf,MAAMC,eAAe/E,QAAQkD,WAAW,CAAC8B,KAAK,CAACF,SAASlH,gBAAgB,AAACkH,CAAAA,SAAS,CAAA,IAAKlH;QACvF,OAAO,WAAW,GAAGM,OAAMsE,aAAa,CAAC,OAAO;YAC5CE,KAAK,cAAcoC,SAAShH,cAAcE,WAAW;YACrD4G,MAAM;YACNxF,WAAWyC,WAAWoD,SAAS;QACnC,GAAGF,aAAaF,GAAG,CAAC,CAACK,OAAOC;YACxB,MAAMC,aAAaN,SAASlH,iBAAiBuH;YAC7C,MAAME,eAAevE,IAAAA,eAAQ,EAAChD,eAAesH;YAC7C,MAAME,mBAAmBxH,cAAcuD,QAAQ,OAAO+D;YACtD,MAAMG,kBAAkBxF,aAAasB,QAAQ,OAAO+D;YACpD,MAAMI,iBAAiBzF,aAAa/B,WAAW,OAAOF,cAAcE,WAAW;YAC/E,MAAMyH,aAAa,AAAC/F,CAAAA,UAAU+B,IAAAA,sBAAe,EAAC/B,SAASgG,IAAAA,kBAAW,EAACL,iBAAiB,IAAI,IAAG,KAAO5F,CAAAA,UAAUgC,IAAAA,sBAAe,EAACkE,IAAAA,oBAAa,EAACN,eAAe5F,WAAW,IAAI,IAAG;YAC3K,OAAO,WAAW,GAAGvB,OAAMsE,aAAa,CAAC,UAAU;gBAC/CoD,KAAKN,mBAAmB5G,oBAAoBH;gBAC5CqG,MAAM;gBACNxF,WAAW+E,IAAAA,oBAAY,EAACtC,WAAWgE,UAAU,EAAEtG,yBAAyBuG,eAAeV,YAAYtH,cAAcE,WAAW,IAAIiC,UAAU4B,WAAWxD,OAAO,EAAEmB,0BAA0B+F,mBAAmBC,kBAAkB3D,WAAWkE,QAAQ,EAAE,CAACN,cAAc5D,WAAWwC,QAAQ;gBACpRA,UAAU,CAACnF,gBAAgB,CAACuG;gBAC5B/C,KAAK0C;gBACLvB,SAAS4B,aAAajF,oBAAoB4E,cAAc7G;gBACxDuF,WAAW2B,aAAa1B,gBAAgBvD,oBAAoB4E,eAAe7G;gBAC3E,cAAcgD,cAAcyE,WAAW,CAACX,cAAcrF;gBACtD,iBAAiBsF;gBACjBtB,UAAUyB,aAAa,IAAI,CAAC;gBAC5BxB,MAAM;YACV,GAAGiB;QACP;IACJ;AACJ;AACAvH,cAAcsI,WAAW,GAAG;AAC5B,SAAS1D,eAAe,EAAElD,iBAAiB,EAAEvB,aAAa,EAAEkC,OAAO,EAAE;IACjE,MAAMkG,eAAe,CAACC;QAClB,IAAI9G,mBAAmB;YACnB,8CAA8C;YAC9C,MAAM+G,qBAAqB,IAAIlG,KAAKpC,cAAcqD,OAAO;YACzDiF,mBAAmBhF,WAAW,CAAC+E;YAC/B,OAAO9G,kBAAkBiE,UAAU,CAAC8C;QACxC;QACA,OAAOC,OAAOF;IAClB;IACA,MAAMG,oBAAoB,CAACC;QACvB,OAAO,CAAC,EAAEL,aAAaK,UAAUC,QAAQ,EAAE,GAAG,EAAEN,aAAaK,UAAUE,MAAM,EAAE,CAAC;IACpF;IACA,MAAMC,6BAA6B,CAACH;QAChC,OAAOvG,QAAQ2G,sBAAsB,GAAG,CAAC,EAAE3G,QAAQ2G,sBAAsB,CAAC,CAAC,EAAEL,kBAAkBC,WAAW,CAAC,GAAG;IAClH;IACA,MAAMK,6BAA6B,CAACL;QAChC,OAAOvG,QAAQ6G,sBAAsB,GAAG,CAAC,EAAE7G,QAAQ6G,sBAAsB,CAAC,CAAC,EAAEP,kBAAkBC,WAAW,CAAC,GAAG;IAClH;IACA,OAAO;QACHL;QACA;YACIY,gBAAgBR;YAChBS,oBAAoBH;YACpBI,oBAAoBN;YACpBO,6BAA6BjH,QAAQkH,yBAAyB;QAClE;KACH;AACL;AACA,SAASpB,eAAeZ,KAAK,EAAEiB,IAAI,EAAElG,KAAK;IACtC,OAAOA,MAAMjC,WAAW,OAAOmI,QAAQlG,MAAMoB,QAAQ,OAAO6D;AAChE;AACA,SAASnB,gBAAgBoD,QAAQ;IAC7B,OAAO,CAACC;QACJ,OAAOA,GAAG1E,GAAG;YACT,KAAK2E,mBAAK;gBACNF;gBACA;QACR;IACJ;AACJ"}