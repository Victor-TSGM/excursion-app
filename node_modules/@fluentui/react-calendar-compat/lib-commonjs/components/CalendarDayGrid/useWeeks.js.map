{"version":3,"sources":["useWeeks.js"],"sourcesContent":["import * as React from 'react';\nimport { compareDates, DAYS_IN_WEEK, getDayGrid } from '../../utils/index';\n/**\n * @internal\n */ export function useWeeks(props, onSelectDate, getSetRefCallback) {\n    /**\n   * Initial parsing of the given props to generate IDayInfo two dimensional array, which contains a representation\n   * of every day in the grid. Convenient for helping with conversions between day refs and Date objects in callbacks.\n   */ const weeks = React.useMemo(()=>{\n        var _props_getMarkedDays;\n        const weeksGrid = getDayGrid(props);\n        const firstVisibleDay = weeksGrid[1][0].originalDate;\n        const lastVisibleDay = weeksGrid[weeksGrid.length - 1][6].originalDate;\n        const markedDays = ((_props_getMarkedDays = props.getMarkedDays) === null || _props_getMarkedDays === void 0 ? void 0 : _props_getMarkedDays.call(props, firstVisibleDay, lastVisibleDay)) || [];\n        /**\n     * Weeks is a 2D array. Weeks[0] contains the last week of the prior range,\n     * Weeks[weeks.length - 1] contains first week of next range. These are for transition states.\n     *\n     * Weeks[1... weeks.length - 2] contains the actual visible data\n     */ const returnValue = [];\n        for(let weekIndex = 0; weekIndex < weeksGrid.length; weekIndex++){\n            const week = [];\n            for(let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++){\n                const day = weeksGrid[weekIndex][dayIndex];\n                const dayInfo = {\n                    onSelected: ()=>onSelectDate(day.originalDate),\n                    setRef: getSetRefCallback(day.key),\n                    ...day,\n                    isMarked: day.isMarked || (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some((markedDay)=>compareDates(day.originalDate, markedDay)))\n                };\n                week.push(dayInfo);\n            }\n            returnValue.push(week);\n        }\n        return returnValue;\n    // TODO: this is missing deps on getSetRefCallback and onSelectDate (and depending on the entire\n    // props object may not be a good idea due to likely frequent mutation). It would be easy to\n    // fix getSetRefCallback to not mutate every render, but onSelectDate is passed down from\n    // Calendar and trying to fix it requires a huge cascade of changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        props\n    ]);\n    return weeks;\n}\n"],"names":["useWeeks","props","onSelectDate","getSetRefCallback","weeks","React","useMemo","_props_getMarkedDays","weeksGrid","getDayGrid","firstVisibleDay","originalDate","lastVisibleDay","length","markedDays","getMarkedDays","call","returnValue","weekIndex","week","dayIndex","DAYS_IN_WEEK","day","dayInfo","onSelected","setRef","key","isMarked","some","markedDay","compareDates","push"],"mappings":";;;;+BAIoBA;;;eAAAA;;;;iEAJG;uBACgC;AAG5C,SAASA,SAASC,KAAK,EAAEC,YAAY,EAAEC,iBAAiB;IAC/D;;;GAGD,GAAG,MAAMC,QAAQC,OAAMC,OAAO,CAAC;QAC1B,IAAIC;QACJ,MAAMC,YAAYC,IAAAA,iBAAU,EAACR;QAC7B,MAAMS,kBAAkBF,SAAS,CAAC,EAAE,CAAC,EAAE,CAACG,YAAY;QACpD,MAAMC,iBAAiBJ,SAAS,CAACA,UAAUK,MAAM,GAAG,EAAE,CAAC,EAAE,CAACF,YAAY;QACtE,MAAMG,aAAa,AAAC,CAAA,AAACP,CAAAA,uBAAuBN,MAAMc,aAAa,AAAD,MAAO,QAAQR,yBAAyB,KAAK,IAAI,KAAK,IAAIA,qBAAqBS,IAAI,CAACf,OAAOS,iBAAiBE,eAAc,KAAM,EAAE;QAChM;;;;;KAKH,GAAG,MAAMK,cAAc,EAAE;QACtB,IAAI,IAAIC,YAAY,GAAGA,YAAYV,UAAUK,MAAM,EAAEK,YAAY;YAC7D,MAAMC,OAAO,EAAE;YACf,IAAI,IAAIC,WAAW,GAAGA,WAAWC,mBAAY,EAAED,WAAW;gBACtD,MAAME,MAAMd,SAAS,CAACU,UAAU,CAACE,SAAS;gBAC1C,MAAMG,UAAU;oBACZC,YAAY,IAAItB,aAAaoB,IAAIX,YAAY;oBAC7Cc,QAAQtB,kBAAkBmB,IAAII,GAAG;oBACjC,GAAGJ,GAAG;oBACNK,UAAUL,IAAIK,QAAQ,IAAKb,CAAAA,eAAe,QAAQA,eAAe,KAAK,IAAI,KAAK,IAAIA,WAAWc,IAAI,CAAC,CAACC,YAAYC,IAAAA,mBAAY,EAACR,IAAIX,YAAY,EAAEkB,WAAU;gBAC7J;gBACAV,KAAKY,IAAI,CAACR;YACd;YACAN,YAAYc,IAAI,CAACZ;QACrB;QACA,OAAOF;IACX,gGAAgG;IAChG,4FAA4F;IAC5F,yFAAyF;IACzF,oEAAoE;IACpE,uDAAuD;IACvD,GAAG;QACChB;KACH;IACD,OAAOG;AACX"}