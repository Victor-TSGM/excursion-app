{"version":3,"sources":["CalendarGridDayCell.js"],"sourcesContent":["import * as React from 'react';\nimport { ArrowDown, ArrowLeft, ArrowRight, ArrowUp, Enter } from '@fluentui/keyboard-keys';\nimport { getRTLSafeKey } from '@fluentui/react-utilities';\nimport { useFluent_unstable } from '@fluentui/react-shared-contexts';\nimport { mergeClasses } from '@griffel/react';\nimport { addDays, addWeeks, compareDates, findAvailableDate, DateRangeType } from '../../utils';\nimport { weekCornersClassNames } from './useWeekCornerStyles.styles';\nimport { extraCalendarDayGridClassNames } from './useCalendarDayGridStyles.styles';\n/**\n * @internal\n */ export const CalendarGridDayCell = (props)=>{\n    const { navigatedDate, dateTimeFormatter, allFocusable, strings, activeDescendantId, navigatedDayRef, calculateRoundedStyles, weeks, classNames, day, dayIndex, weekIndex, weekCorners, ariaHidden, customDayCellRef, dateRangeType, daysToSelectInDayView, onSelectDate, restrictedDates, minDate, maxDate, onNavigateDate, getDayInfosInRangeOfDay, getRefsFromDayInfos } = props;\n    var _weekCorners_;\n    const cornerStyle = (_weekCorners_ = weekCorners === null || weekCorners === void 0 ? void 0 : weekCorners[weekIndex + '_' + dayIndex]) !== null && _weekCorners_ !== void 0 ? _weekCorners_ : '';\n    const isNavigatedDate = compareDates(navigatedDate, day.originalDate);\n    const { dir } = useFluent_unstable();\n    const navigateMonthEdge = (ev, date)=>{\n        let targetDate = undefined;\n        let direction = 1; // by default search forward\n        if (ev.key === ArrowUp) {\n            targetDate = addWeeks(date, -1);\n            direction = -1;\n        } else if (ev.key === ArrowDown) {\n            targetDate = addWeeks(date, 1);\n        } else if (ev.key === getRTLSafeKey(ArrowLeft, dir)) {\n            targetDate = addDays(date, -1);\n            direction = -1;\n        } else if (ev.key === getRTLSafeKey(ArrowRight, dir)) {\n            targetDate = addDays(date, 1);\n        }\n        if (!targetDate) {\n            // if we couldn't find a target date at all, do nothing\n            return;\n        }\n        const findAvailableDateOptions = {\n            initialDate: date,\n            targetDate,\n            direction,\n            restrictedDates,\n            minDate,\n            maxDate\n        };\n        // target date is restricted, search in whatever direction until finding the next possible date,\n        // stopping at boundaries\n        let nextDate = findAvailableDate(findAvailableDateOptions);\n        if (!nextDate) {\n            // if no dates available in initial direction, try going backwards\n            findAvailableDateOptions.direction = -direction;\n            nextDate = findAvailableDate(findAvailableDateOptions);\n        }\n        // if the nextDate is still inside the same focusZone area, let the focusZone handle setting the focus so we\n        // don't jump the view unnecessarily\n        const isInCurrentView = weeks && nextDate && weeks.slice(1, weeks.length - 1).some((week)=>{\n            return week.some((dayToCompare)=>{\n                return compareDates(dayToCompare.originalDate, nextDate);\n            });\n        });\n        if (isInCurrentView) {\n            return;\n        }\n        // else, fire navigation on the date to change the view to show it\n        if (nextDate) {\n            onNavigateDate(nextDate, true);\n            ev.preventDefault();\n        }\n    };\n    const onMouseOverDay = (ev)=>{\n        const dayInfos = getDayInfosInRangeOfDay(day);\n        const dayRefs = getRefsFromDayInfos(dayInfos);\n        dayRefs.forEach((dayRef, index)=>{\n            if (dayRef) {\n                dayRef.classList.add(extraCalendarDayGridClassNames.hoverStyle);\n                if (!dayInfos[index].isSelected && dateRangeType === DateRangeType.Day && daysToSelectInDayView && daysToSelectInDayView > 1) {\n                    // remove the static classes first to overwrite them\n                    dayRef.classList.remove(weekCornersClassNames.bottomLeftCornerDate, weekCornersClassNames.bottomRightCornerDate, weekCornersClassNames.topLeftCornerDate, weekCornersClassNames.topRightCornerDate);\n                    const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();\n                    if (classNamesToAdd) {\n                        dayRef.classList.add(...classNamesToAdd.trim().split(' '));\n                    }\n                }\n            }\n        });\n    };\n    const onMouseDownDay = (ev)=>{\n        const dayInfos = getDayInfosInRangeOfDay(day);\n        const dayRefs = getRefsFromDayInfos(dayInfos);\n        dayRefs.forEach((dayRef)=>{\n            if (dayRef) {\n                dayRef.classList.add(extraCalendarDayGridClassNames.pressedStyle);\n            }\n        });\n    };\n    const onMouseUpDay = (ev)=>{\n        const dayInfos = getDayInfosInRangeOfDay(day);\n        const dayRefs = getRefsFromDayInfos(dayInfos);\n        dayRefs.forEach((dayRef)=>{\n            if (dayRef) {\n                dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);\n            }\n        });\n    };\n    const onMouseOutDay = (ev)=>{\n        const dayInfos = getDayInfosInRangeOfDay(day);\n        const dayRefs = getRefsFromDayInfos(dayInfos);\n        dayRefs.forEach((dayRef, index)=>{\n            if (dayRef) {\n                dayRef.classList.remove(extraCalendarDayGridClassNames.hoverStyle);\n                dayRef.classList.remove(extraCalendarDayGridClassNames.pressedStyle);\n                if (!dayInfos[index].isSelected && dateRangeType === DateRangeType.Day && daysToSelectInDayView && daysToSelectInDayView > 1) {\n                    const classNamesToAdd = calculateRoundedStyles(false, false, index > 0, index < dayRefs.length - 1).trim();\n                    if (classNamesToAdd) {\n                        dayRef.classList.remove(...classNamesToAdd.trim().split(' '));\n                    }\n                }\n            }\n        });\n    };\n    const onDayKeyDown = (ev)=>{\n        if (ev.key === Enter) {\n            onSelectDate === null || onSelectDate === void 0 ? void 0 : onSelectDate(day.originalDate);\n        } else {\n            navigateMonthEdge(ev, day.originalDate);\n        }\n    };\n    let ariaLabel = day.originalDate.getDate() + ', ' + strings.months[day.originalDate.getMonth()] + ', ' + day.originalDate.getFullYear();\n    if (day.isMarked) {\n        ariaLabel = ariaLabel + ', ' + strings.dayMarkedAriaLabel;\n    }\n    const isFocusable = !ariaHidden && (allFocusable || (day.isInBounds ? true : undefined));\n    return /*#__PURE__*/ React.createElement(\"td\", {\n        className: mergeClasses(classNames.dayCell, weekCorners && cornerStyle, day.isSelected && classNames.daySelected, !day.isInBounds && classNames.dayOutsideBounds, !day.isInMonth && classNames.dayOutsideNavigatedMonth),\n        ref: (element)=>{\n            customDayCellRef === null || customDayCellRef === void 0 ? void 0 : customDayCellRef(element, day.originalDate, classNames);\n            day.setRef(element);\n            isNavigatedDate && (navigatedDayRef.current = element);\n        },\n        \"aria-hidden\": ariaHidden,\n        \"aria-disabled\": !ariaHidden && !day.isInBounds,\n        onClick: day.isInBounds && !ariaHidden ? day.onSelected : undefined,\n        onMouseOver: !ariaHidden ? onMouseOverDay : undefined,\n        onMouseDown: !ariaHidden ? onMouseDownDay : undefined,\n        onMouseUp: !ariaHidden ? onMouseUpDay : undefined,\n        onMouseOut: !ariaHidden ? onMouseOutDay : undefined,\n        onKeyDown: !ariaHidden ? onDayKeyDown : undefined,\n        role: \"gridcell\",\n        tabIndex: isNavigatedDate || isFocusable ? 0 : undefined,\n        \"aria-current\": day.isToday ? 'date' : undefined,\n        \"aria-selected\": day.isInBounds ? day.isSelected : undefined\n    }, /*#__PURE__*/ React.createElement(\"button\", {\n        key: day.key + 'button',\n        \"aria-hidden\": ariaHidden,\n        className: mergeClasses(classNames.dayButton, day.isToday && classNames.dayIsToday),\n        \"aria-label\": ariaLabel,\n        id: isNavigatedDate ? activeDescendantId : undefined,\n        disabled: !ariaHidden && !day.isInBounds,\n        type: \"button\",\n        tabIndex: -1\n    }, /*#__PURE__*/ React.createElement(\"span\", {\n        \"aria-hidden\": \"true\"\n    }, dateTimeFormatter.formatDay(day.originalDate)), day.isMarked && /*#__PURE__*/ React.createElement(\"div\", {\n        \"aria-hidden\": \"true\",\n        className: classNames.dayMarker\n    })));\n};\n"],"names":["CalendarGridDayCell","props","navigatedDate","dateTimeFormatter","allFocusable","strings","activeDescendantId","navigatedDayRef","calculateRoundedStyles","weeks","classNames","day","dayIndex","weekIndex","weekCorners","ariaHidden","customDayCellRef","dateRangeType","daysToSelectInDayView","onSelectDate","restrictedDates","minDate","maxDate","onNavigateDate","getDayInfosInRangeOfDay","getRefsFromDayInfos","_weekCorners_","cornerStyle","isNavigatedDate","compareDates","originalDate","dir","useFluent_unstable","navigateMonthEdge","ev","date","targetDate","undefined","direction","key","ArrowUp","addWeeks","ArrowDown","getRTLSafeKey","ArrowLeft","addDays","ArrowRight","findAvailableDateOptions","initialDate","nextDate","findAvailableDate","isInCurrentView","slice","length","some","week","dayToCompare","preventDefault","onMouseOverDay","dayInfos","dayRefs","forEach","dayRef","index","classList","add","extraCalendarDayGridClassNames","hoverStyle","isSelected","DateRangeType","Day","remove","weekCornersClassNames","bottomLeftCornerDate","bottomRightCornerDate","topLeftCornerDate","topRightCornerDate","classNamesToAdd","trim","split","onMouseDownDay","pressedStyle","onMouseUpDay","onMouseOutDay","onDayKeyDown","Enter","ariaLabel","getDate","months","getMonth","getFullYear","isMarked","dayMarkedAriaLabel","isFocusable","isInBounds","React","createElement","className","mergeClasses","dayCell","daySelected","dayOutsideBounds","isInMonth","dayOutsideNavigatedMonth","ref","element","setRef","current","onClick","onSelected","onMouseOver","onMouseDown","onMouseUp","onMouseOut","onKeyDown","role","tabIndex","isToday","dayButton","dayIsToday","id","disabled","type","formatDay","dayMarker"],"mappings":"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"}