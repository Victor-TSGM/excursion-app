{"version":3,"sources":["CalendarDayGrid.js"],"sourcesContent":["import * as React from 'react';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\nimport { useId } from '@fluentui/react-utilities';\nimport { getBoundedDateRange, getDateRangeArray, isRestrictedDate, DateRangeType } from '../../utils';\nimport { useCalendarDayGridStyles_unstable } from './useCalendarDayGridStyles.styles';\nimport { CalendarMonthHeaderRow } from './CalendarMonthHeaderRow';\nimport { CalendarGridRow } from './CalendarGridRow';\nimport { useWeeks } from './useWeeks';\nimport { useWeekCornerStyles } from './useWeekCornerStyles.styles';\nimport { mergeClasses } from '@griffel/react';\nfunction useDayRefs() {\n    const daysRef = React.useRef({});\n    const getSetRefCallback = (dayKey)=>(element)=>{\n            if (element === null) {\n                delete daysRef.current[dayKey];\n            } else {\n                daysRef.current[dayKey] = element;\n            }\n        };\n    return [\n        daysRef,\n        getSetRefCallback\n    ];\n}\nfunction useAnimateBackwards(weeks) {\n    const previousNavigatedDateRef = React.useRef();\n    React.useEffect(()=>{\n        previousNavigatedDateRef.current = weeks[0][0].originalDate;\n    });\n    const previousNavigatedDate = previousNavigatedDateRef.current;\n    if (!previousNavigatedDate || previousNavigatedDate.getTime() === weeks[0][0].originalDate.getTime()) {\n        return undefined;\n    } else if (previousNavigatedDate <= weeks[0][0].originalDate) {\n        return false;\n    } else {\n        return true;\n    }\n}\nexport const CalendarDayGrid = (props)=>{\n    const navigatedDayRef = React.useRef(null);\n    const activeDescendantId = useId();\n    const onSelectDate = (selectedDate)=>{\n        var _props_onSelectDate, _props_onNavigateDate;\n        const { firstDayOfWeek, minDate, maxDate, workWeekDays, daysToSelectInDayView, restrictedDates } = props;\n        const restrictedDatesOptions = {\n            minDate,\n            maxDate,\n            restrictedDates\n        };\n        let dateRange = getDateRangeArray(selectedDate, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);\n        dateRange = getBoundedDateRange(dateRange, minDate, maxDate);\n        dateRange = dateRange.filter((d)=>{\n            return !isRestrictedDate(d, restrictedDatesOptions);\n        });\n        (_props_onSelectDate = props.onSelectDate) === null || _props_onSelectDate === void 0 ? void 0 : _props_onSelectDate.call(props, selectedDate, dateRange);\n        (_props_onNavigateDate = props.onNavigateDate) === null || _props_onNavigateDate === void 0 ? void 0 : _props_onNavigateDate.call(props, selectedDate, true);\n    };\n    const [daysRef, getSetRefCallback] = useDayRefs();\n    const weeks = useWeeks(props, onSelectDate, getSetRefCallback);\n    const animateBackwards = useAnimateBackwards(weeks);\n    const [getWeekCornerStyles, calculateRoundedStyles] = useWeekCornerStyles(props);\n    React.useImperativeHandle(props.componentRef, ()=>({\n            focus () {\n                var _navigatedDayRef_current_focus, _navigatedDayRef_current;\n                (_navigatedDayRef_current = navigatedDayRef.current) === null || _navigatedDayRef_current === void 0 ? void 0 : (_navigatedDayRef_current_focus = _navigatedDayRef_current.focus) === null || _navigatedDayRef_current_focus === void 0 ? void 0 : _navigatedDayRef_current_focus.call(_navigatedDayRef_current);\n            }\n        }), []);\n    /**\n   *\n   * Section for setting hover/pressed styles. Because we want arbitrary blobs of days to be selectable, to support\n   * highlighting every day in the month for month view, css :hover style isn't enough, so we need mouse callbacks\n   * to set classnames on all relevant child refs to apply the styling\n   *\n   */ const getDayInfosInRangeOfDay = (dayToCompare)=>{\n        // The hover state looks weird with non-contiguous days in work week view. In work week, show week hover state\n        const dateRangeHoverType = getDateRangeTypeToUse(props.dateRangeType, props.workWeekDays);\n        // gets all the dates for the given date range type that are in the same date range as the given day\n        const dateRange = getDateRangeArray(dayToCompare.originalDate, dateRangeHoverType, props.firstDayOfWeek, props.workWeekDays, props.daysToSelectInDayView).map((date)=>date.getTime());\n        // gets all the day refs for the given dates\n        const dayInfosInRange = weeks.reduce((accumulatedValue, currentWeek)=>{\n            return accumulatedValue.concat(currentWeek.filter((weekDay)=>dateRange.indexOf(weekDay.originalDate.getTime()) !== -1));\n        }, []);\n        return dayInfosInRange;\n    };\n    const getRefsFromDayInfos = (dayInfosInRange)=>{\n        let dayRefs = [];\n        dayRefs = dayInfosInRange.map((dayInfo)=>daysRef.current[dayInfo.key]);\n        return dayRefs;\n    };\n    const { dateRangeType, showWeekNumbers, labelledBy, lightenDaysOutsideNavigatedMonth, animationDirection } = props;\n    const classNames = useCalendarDayGridStyles_unstable({\n        animateBackwards,\n        animationDirection,\n        dateRangeType,\n        lightenDaysOutsideNavigatedMonth: lightenDaysOutsideNavigatedMonth === undefined ? true : lightenDaysOutsideNavigatedMonth,\n        showWeekNumbers\n    });\n    // When the month is highlighted get the corner dates so that styles can be added to them\n    const weekCorners = getWeekCornerStyles(weeks);\n    const partialWeekProps = {\n        weeks,\n        navigatedDayRef,\n        calculateRoundedStyles,\n        activeDescendantId,\n        classNames,\n        weekCorners,\n        getDayInfosInRangeOfDay,\n        getRefsFromDayInfos\n    };\n    const arrowNavigationAttributes = useArrowNavigationGroup({\n        axis: 'grid'\n    });\n    return /*#__PURE__*/ React.createElement(\"table\", {\n        className: mergeClasses(classNames.table, props.className),\n        \"aria-multiselectable\": \"false\",\n        \"aria-labelledby\": labelledBy,\n        \"aria-activedescendant\": activeDescendantId,\n        role: \"grid\",\n        ...arrowNavigationAttributes\n    }, /*#__PURE__*/ React.createElement(\"tbody\", null, /*#__PURE__*/ React.createElement(CalendarMonthHeaderRow, {\n        ...props,\n        classNames: classNames,\n        weeks: weeks\n    }), /*#__PURE__*/ React.createElement(CalendarGridRow, {\n        ...props,\n        ...partialWeekProps,\n        week: weeks[0],\n        weekIndex: -1,\n        rowClassName: classNames.firstTransitionWeek,\n        \"aria-role\": \"presentation\",\n        ariaHidden: true\n    }), weeks.slice(1, weeks.length - 1).map((week, weekIndex)=>/*#__PURE__*/ React.createElement(CalendarGridRow, {\n            ...props,\n            ...partialWeekProps,\n            key: weekIndex,\n            week: week,\n            weekIndex: weekIndex,\n            rowClassName: classNames.weekRow\n        })), /*#__PURE__*/ React.createElement(CalendarGridRow, {\n        ...props,\n        ...partialWeekProps,\n        week: weeks[weeks.length - 1],\n        weekIndex: -2,\n        rowClassName: classNames.lastTransitionWeek,\n        \"aria-role\": \"presentation\",\n        ariaHidden: true\n    })));\n};\nCalendarDayGrid.displayName = 'CalendarDayGrid';\n/**\n * When given work week, if the days are non-contiguous, the hover states look really weird. So for non-contiguous\n * work weeks, we'll just show week view instead.\n */ function getDateRangeTypeToUse(dateRangeType, workWeekDays) {\n    if (workWeekDays && dateRangeType === DateRangeType.WorkWeek) {\n        const sortedWWDays = workWeekDays.slice().sort();\n        let isContiguous = true;\n        for(let i = 1; i < sortedWWDays.length; i++){\n            if (sortedWWDays[i] !== sortedWWDays[i - 1] + 1) {\n                isContiguous = false;\n                break;\n            }\n        }\n        if (!isContiguous || workWeekDays.length === 0) {\n            return DateRangeType.Week;\n        }\n    }\n    return dateRangeType;\n}\n"],"names":["CalendarDayGrid","useDayRefs","daysRef","React","useRef","getSetRefCallback","dayKey","element","current","useAnimateBackwards","weeks","previousNavigatedDateRef","useEffect","originalDate","previousNavigatedDate","getTime","undefined","props","navigatedDayRef","activeDescendantId","useId","onSelectDate","selectedDate","_props_onSelectDate","_props_onNavigateDate","firstDayOfWeek","minDate","maxDate","workWeekDays","daysToSelectInDayView","restrictedDates","restrictedDatesOptions","dateRange","getDateRangeArray","dateRangeType","getBoundedDateRange","filter","d","isRestrictedDate","call","onNavigateDate","useWeeks","animateBackwards","getWeekCornerStyles","calculateRoundedStyles","useWeekCornerStyles","useImperativeHandle","componentRef","focus","_navigatedDayRef_current_focus","_navigatedDayRef_current","getDayInfosInRangeOfDay","dayToCompare","dateRangeHoverType","getDateRangeTypeToUse","map","date","dayInfosInRange","reduce","accumulatedValue","currentWeek","concat","weekDay","indexOf","getRefsFromDayInfos","dayRefs","dayInfo","key","showWeekNumbers","labelledBy","lightenDaysOutsideNavigatedMonth","animationDirection","classNames","useCalendarDayGridStyles_unstable","weekCorners","partialWeekProps","arrowNavigationAttributes","useArrowNavigationGroup","axis","createElement","className","mergeClasses","table","role","CalendarMonthHeaderRow","CalendarGridRow","week","weekIndex","rowClassName","firstTransitionWeek","ariaHidden","slice","length","weekRow","lastTransitionWeek","displayName","DateRangeType","WorkWeek","sortedWWDays","sort","isContiguous","i","Week"],"mappings":"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"}