{"version":3,"sources":["dateMath.js"],"sourcesContent":["import { DateRangeType, DayOfWeek, FirstWeekOfYear, MonthOfYear, TimeConstants } from '../constants';\n/**\n * Returns a date offset from the given date by the specified number of days.\n * @param date - The origin date\n * @param days - The number of days to offset. 'days' can be negative.\n * @returns A new Date object offset from the origin date by the given number of days\n */ export function addDays(date, days) {\n    const result = new Date(date.getTime());\n    result.setDate(result.getDate() + days);\n    return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of weeks.\n * @param date - The origin date\n * @param weeks - The number of weeks to offset. 'weeks' can be negative.\n * @returns A new Date object offset from the origin date by the given number of weeks\n */ export function addWeeks(date, weeks) {\n    return addDays(date, weeks * TimeConstants.DaysInOneWeek);\n}\n/**\n * Returns a date offset from the given date by the specified number of months.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param months - The number of months to offset. 'months' can be negative.\n * @returns A new Date object offset from the origin date by the given number of months\n */ export function addMonths(date, months) {\n    let result = new Date(date.getTime());\n    const newMonth = result.getMonth() + months;\n    result.setMonth(newMonth);\n    // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n    // Loop until we back up to a day the new month has.\n    // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n    if (result.getMonth() !== (newMonth % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n        result = addDays(result, -result.getDate());\n    }\n    return result;\n}\n/**\n * Returns a date offset from the given date by the specified number of years.\n * The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param years - The number of years to offset. 'years' can be negative.\n * @returns A new Date object offset from the origin date by the given number of years\n */ export function addYears(date, years) {\n    let result = new Date(date.getTime());\n    result.setFullYear(date.getFullYear() + years);\n    // We want to maintain the same day-of-month, but that may not be possible if the new month doesn't have enough days.\n    // Loop until we back up to a day the new month has.\n    // (Weird modulo math is due to Javascript's treatment of negative numbers in modulo)\n    if (result.getMonth() !== (date.getMonth() % TimeConstants.MonthInOneYear + TimeConstants.MonthInOneYear) % TimeConstants.MonthInOneYear) {\n        result = addDays(result, -result.getDate());\n    }\n    return result;\n}\n/**\n * Returns a date that is the first day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the month.\n */ export function getMonthStart(date) {\n    return new Date(date.getFullYear(), date.getMonth(), 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the month of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the month.\n */ export function getMonthEnd(date) {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the first day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the first day of the year.\n */ export function getYearStart(date) {\n    return new Date(date.getFullYear(), 0, 1, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is the last day of the year of the provided date.\n * @param date - The origin date\n * @returns A new Date object with the day set to the last day of the year.\n */ export function getYearEnd(date) {\n    return new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0, 0);\n}\n/**\n * Returns a date that is a copy of the given date, aside from the month changing to the given month.\n *  The method tries to preserve the day-of-month; however, if the new month does not have enough days\n * to contain the original day-of-month, we'll use the last day of the new month.\n * @param date - The origin date\n * @param month - The 0-based index of the month to set on the date.\n * @returns A new Date object with the given month set.\n */ export function setMonth(date, month) {\n    return addMonths(date, month - date.getMonth());\n}\n/**\n * Compares two dates, and returns true if the two dates (not accounting for time-of-day) are equal.\n * @returns True if the two dates represent the same date (regardless of time-of-day), false otherwise.\n */ export function compareDates(date1, date2) {\n    if (!date1 && !date2) {\n        return true;\n    } else if (!date1 || !date2) {\n        return false;\n    } else {\n        return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n    }\n}\n/**\n * Compare the date parts of two dates\n * @param date1 - The first date to compare\n * @param date2 - The second date to compare\n * @returns A negative value if date1 is earlier than date2, 0 if the dates are equal, or a positive value\n * if date1 is later than date2.\n */ export function compareDatePart(date1, date2) {\n    return getDatePartHashValue(date1) - getDatePartHashValue(date2);\n}\n/**\n * Gets the date range array including the specified date. The date range array is calculated as the list\n * of dates accounting for the specified first day of the week and date range type.\n * @param date - The input date\n * @param dateRangeType - The desired date range type, i.e., day, week, month, etc.\n * @param firstDayOfWeek - The first day of the week.\n * @param workWeekDays - The allowed days in work week. If not provided, assumes all days are allowed.\n * @param daysToSelectInDayView - The number of days to include when using dateRangeType === DateRangeType.Day\n * for multiday view. Defaults to 1\n * @returns An array of dates representing the date range containing the specified date.\n */ export function getDateRangeArray(date, dateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView = 1) {\n    const datesArray = [];\n    let startDate;\n    let endDate = null;\n    if (!workWeekDays) {\n        workWeekDays = [\n            DayOfWeek.Monday,\n            DayOfWeek.Tuesday,\n            DayOfWeek.Wednesday,\n            DayOfWeek.Thursday,\n            DayOfWeek.Friday\n        ];\n    }\n    daysToSelectInDayView = Math.max(daysToSelectInDayView, 1);\n    switch(dateRangeType){\n        case DateRangeType.Day:\n            startDate = getDatePart(date);\n            endDate = addDays(startDate, daysToSelectInDayView);\n            break;\n        case DateRangeType.Week:\n        case DateRangeType.WorkWeek:\n            startDate = getStartDateOfWeek(getDatePart(date), firstDayOfWeek);\n            endDate = addDays(startDate, TimeConstants.DaysInOneWeek);\n            break;\n        case DateRangeType.Month:\n            startDate = new Date(date.getFullYear(), date.getMonth(), 1);\n            endDate = addMonths(startDate, 1);\n            break;\n        default:\n            throw new Error('Unexpected object: ' + dateRangeType);\n    }\n    // Populate the dates array with the dates in range\n    let nextDate = startDate;\n    do {\n        if (dateRangeType !== DateRangeType.WorkWeek) {\n            // push all days not in work week view\n            datesArray.push(nextDate);\n        } else if (workWeekDays.indexOf(nextDate.getDay()) !== -1) {\n            datesArray.push(nextDate);\n        }\n        nextDate = addDays(nextDate, 1);\n    }while (!compareDates(nextDate, endDate))\n    return datesArray;\n}\n/**\n * Checks whether the specified date is in the given date range.\n * @param date - The origin date\n * @param dateRange - An array of dates to do the lookup on\n * @returns True if the date matches one of the dates in the specified array, false otherwise.\n */ export function isInDateRangeArray(date, dateRange) {\n    for (const dateInRange of dateRange){\n        if (compareDates(date, dateInRange)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param navigatedDate - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The weeks number array for the current month.\n */ export function getWeekNumbersInMonth(weeksInMonth, firstDayOfWeek, firstWeekOfYear, navigatedDate) {\n    const selectedYear = navigatedDate.getFullYear();\n    const selectedMonth = navigatedDate.getMonth();\n    let dayOfMonth = 1;\n    const fistDayOfMonth = new Date(selectedYear, selectedMonth, dayOfMonth);\n    const endOfFirstWeek = dayOfMonth + (firstDayOfWeek + TimeConstants.DaysInOneWeek - 1) - adjustWeekDay(firstDayOfWeek, fistDayOfMonth.getDay());\n    let endOfWeekRange = new Date(selectedYear, selectedMonth, endOfFirstWeek);\n    dayOfMonth = endOfWeekRange.getDate();\n    const weeksArray = [];\n    for(let i = 0; i < weeksInMonth; i++){\n        // Get week number for end of week\n        weeksArray.push(getWeekNumber(endOfWeekRange, firstDayOfWeek, firstWeekOfYear));\n        dayOfMonth += TimeConstants.DaysInOneWeek;\n        endOfWeekRange = new Date(selectedYear, selectedMonth, dayOfMonth);\n    }\n    return weeksArray;\n}\n/**\n * Returns the week number for a date.\n * Week numbers are 1 - 52 (53) in a year\n * @param date - A date to find the week number for.\n * @param firstDayOfWeek - The first day of the week (0-6, Sunday = 0)\n * @param firstWeekOfYear - The first week of the year (1-2)\n * @returns The week's number in the year.\n */ export function getWeekNumber(date, firstDayOfWeek, firstWeekOfYear) {\n    // First four-day week of the year - minumum days count\n    const fourDayWeek = 4;\n    switch(firstWeekOfYear){\n        case FirstWeekOfYear.FirstFullWeek:\n            return getWeekOfYearFullDays(date, firstDayOfWeek, TimeConstants.DaysInOneWeek);\n        case FirstWeekOfYear.FirstFourDayWeek:\n            return getWeekOfYearFullDays(date, firstDayOfWeek, fourDayWeek);\n        default:\n            return getFirstDayWeekOfYear(date, firstDayOfWeek);\n    }\n}\n/**\n * Gets the date for the first day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */ export function getStartDateOfWeek(date, firstDayOfWeek) {\n    let daysOffset = firstDayOfWeek - date.getDay();\n    if (daysOffset > 0) {\n        // If first day of week is > date, go 1 week back, to ensure resulting date is in the past.\n        daysOffset -= TimeConstants.DaysInOneWeek;\n    }\n    return addDays(date, daysOffset);\n}\n/**\n * Gets the date for the last day of the week based on the given date assuming\n * the specified first day of the week.\n * @param date - The date to find the beginning of the week date for.\n * @returns A new date object representing the first day of the week containing the input date.\n */ export function getEndDateOfWeek(date, firstDayOfWeek) {\n    const lastDayOfWeek = firstDayOfWeek - 1 >= 0 ? firstDayOfWeek - 1 : TimeConstants.DaysInOneWeek - 1;\n    let daysOffset = lastDayOfWeek - date.getDay();\n    if (daysOffset < 0) {\n        // If last day of week is < date, go 1 week forward, to ensure resulting date is in the future.\n        daysOffset += TimeConstants.DaysInOneWeek;\n    }\n    return addDays(date, daysOffset);\n}\n/**\n * Gets a new date with the time portion zeroed out, i.e., set to midnight\n * @param date - The origin date\n * @returns A new date with the time set to midnight\n */ function getDatePart(date) {\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n}\n/**\n * Helper function to assist in date comparisons\n */ export function getDatePartHashValue(date) {\n    // Generate date hash value created as sum of Date (up to 31 = 5 bits), Month (up to 11 = 4 bits) and Year.\n    // eslint-disable-next-line no-bitwise\n    return date.getDate() + (date.getMonth() << 5) + (date.getFullYear() << 9);\n}\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param numberOfFullDays - week settings.\n * @returns The week's number in the year.\n */ function getWeekOfYearFullDays(date, firstDayOfWeek, numberOfFullDays) {\n    const dayOfYear = getDayOfYear(date) - 1;\n    let num = date.getDay() - dayOfYear % TimeConstants.DaysInOneWeek;\n    const lastDayOfPrevYear = new Date(date.getFullYear() - 1, MonthOfYear.December, 31);\n    const daysInYear = getDayOfYear(lastDayOfPrevYear) - 1;\n    let num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    if (num2 !== 0 && num2 >= numberOfFullDays) {\n        num2 -= TimeConstants.DaysInOneWeek;\n    }\n    let num3 = dayOfYear - num2;\n    if (num3 < 0) {\n        num -= daysInYear % TimeConstants.DaysInOneWeek;\n        num2 = (firstDayOfWeek - num + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n        if (num2 !== 0 && num2 + 1 >= numberOfFullDays) {\n            num2 -= TimeConstants.DaysInOneWeek;\n        }\n        num3 = daysInYear - num2;\n    }\n    return Math.floor(num3 / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for `getWeekNumber`.\n * Returns week number for a date.\n * @param date - current selected date.\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @returns The week's number in the year.\n */ function getFirstDayWeekOfYear(date, firstDayOfWeek) {\n    const num = getDayOfYear(date) - 1;\n    const num2 = date.getDay() - num % TimeConstants.DaysInOneWeek;\n    const num3 = (num2 - firstDayOfWeek + 2 * TimeConstants.DaysInOneWeek) % TimeConstants.DaysInOneWeek;\n    return Math.floor((num + num3) / TimeConstants.DaysInOneWeek + 1);\n}\n/**\n * Helper function for `getWeekNumber`.\n * Returns adjusted week day number when `firstDayOfWeek` is other than Sunday.\n * For Week Day Number comparison checks\n * @param firstDayOfWeek - The first day of week (0-6, Sunday = 0)\n * @param dateWeekDay - shifts number forward to 1 week in case passed as true\n * @returns The day of week adjusted to `firstDayOfWeek`; e.g. when `firstDayOfWeek` is Monday (1),\n * Sunday becomes 7.\n */ function adjustWeekDay(firstDayOfWeek, dateWeekDay) {\n    return firstDayOfWeek !== DayOfWeek.Sunday && dateWeekDay < firstDayOfWeek ? dateWeekDay + TimeConstants.DaysInOneWeek : dateWeekDay;\n}\n/**\n * Returns the day number for a date in a year:\n * the number of days since January 1st in the particular year.\n * @param date - A date to find the day number for.\n * @returns The day's number in the year.\n */ function getDayOfYear(date) {\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    let daysUntilDate = 0;\n    for(let i = 0; i < month; i++){\n        daysUntilDate += daysInMonth(i + 1, year);\n    }\n    daysUntilDate += date.getDate();\n    return daysUntilDate;\n}\n/**\n * Returns the number of days in the month\n * @param month - The month number to target (months 1-12).\n * @param year - The year to target.\n * @returns The number of days in the month.\n */ function daysInMonth(month, year) {\n    return new Date(year, month, 0).getDate();\n}\n"],"names":["addDays","addMonths","addWeeks","addYears","compareDatePart","compareDates","getDatePartHashValue","getDateRangeArray","getEndDateOfWeek","getMonthEnd","getMonthStart","getStartDateOfWeek","getWeekNumber","getWeekNumbersInMonth","getYearEnd","getYearStart","isInDateRangeArray","setMonth","date","days","result","Date","getTime","setDate","getDate","weeks","TimeConstants","DaysInOneWeek","months","newMonth","getMonth","MonthInOneYear","years","setFullYear","getFullYear","month","date1","date2","dateRangeType","firstDayOfWeek","workWeekDays","daysToSelectInDayView","datesArray","startDate","endDate","DayOfWeek","Monday","Tuesday","Wednesday","Thursday","Friday","Math","max","DateRangeType","Day","getDatePart","Week","WorkWeek","Month","Error","nextDate","push","indexOf","getDay","dateRange","dateInRange","weeksInMonth","firstWeekOfYear","navigatedDate","selectedYear","selectedMonth","dayOfMonth","fistDayOfMonth","endOfFirstWeek","adjustWeekDay","endOfWeekRange","weeksArray","i","fourDayWeek","FirstWeekOfYear","FirstFullWeek","getWeekOfYearFullDays","FirstFourDayWeek","getFirstDayWeekOfYear","daysOffset","lastDayOfWeek","numberOfFullDays","dayOfYear","getDayOfYear","num","lastDayOfPrevYear","MonthOfYear","December","daysInYear","num2","num3","floor","dateWeekDay","Sunday","year","daysUntilDate","daysInMonth"],"mappings":";;;;;;;;;;;IAMoBA,OAAO;eAAPA;;IAoBAC,SAAS;eAATA;;IAVAC,QAAQ;eAARA;;IA6BAC,QAAQ;eAARA;;IAmEAC,eAAe;eAAfA;;IAfAC,YAAY;eAAZA;;IAoKAC,oBAAoB;eAApBA;;IAxIAC,iBAAiB;eAAjBA;;IAsHAC,gBAAgB;eAAhBA;;IAhLAC,WAAW;eAAXA;;IAPAC,aAAa;eAAbA;;IA0KAC,kBAAkB;eAAlBA;;IAjBAC,aAAa;eAAbA;;IAxBAC,qBAAqB;eAArBA;;IA5GAC,UAAU;eAAVA;;IAPAC,YAAY;eAAZA;;IAoGAC,kBAAkB;eAAlBA;;IAnFAC,QAAQ;eAARA;;;2BA3FkE;AAM3E,SAASjB,QAAQkB,IAAI,EAAEC,IAAI;IAClC,MAAMC,SAAS,IAAIC,KAAKH,KAAKI,OAAO;IACpCF,OAAOG,OAAO,CAACH,OAAOI,OAAO,KAAKL;IAClC,OAAOC;AACX;AAMW,SAASlB,SAASgB,IAAI,EAAEO,KAAK;IACpC,OAAOzB,QAAQkB,MAAMO,QAAQC,wBAAa,CAACC,aAAa;AAC5D;AAQW,SAAS1B,UAAUiB,IAAI,EAAEU,MAAM;IACtC,IAAIR,SAAS,IAAIC,KAAKH,KAAKI,OAAO;IAClC,MAAMO,WAAWT,OAAOU,QAAQ,KAAKF;IACrCR,OAAOH,QAAQ,CAACY;IAChB,qHAAqH;IACrH,oDAAoD;IACpD,qFAAqF;IACrF,IAAIT,OAAOU,QAAQ,OAAO,AAACD,CAAAA,WAAWH,wBAAa,CAACK,cAAc,GAAGL,wBAAa,CAACK,cAAc,AAAD,IAAKL,wBAAa,CAACK,cAAc,EAAE;QAC/HX,SAASpB,QAAQoB,QAAQ,CAACA,OAAOI,OAAO;IAC5C;IACA,OAAOJ;AACX;AAQW,SAASjB,SAASe,IAAI,EAAEc,KAAK;IACpC,IAAIZ,SAAS,IAAIC,KAAKH,KAAKI,OAAO;IAClCF,OAAOa,WAAW,CAACf,KAAKgB,WAAW,KAAKF;IACxC,qHAAqH;IACrH,oDAAoD;IACpD,qFAAqF;IACrF,IAAIZ,OAAOU,QAAQ,OAAO,AAACZ,CAAAA,KAAKY,QAAQ,KAAKJ,wBAAa,CAACK,cAAc,GAAGL,wBAAa,CAACK,cAAc,AAAD,IAAKL,wBAAa,CAACK,cAAc,EAAE;QACtIX,SAASpB,QAAQoB,QAAQ,CAACA,OAAOI,OAAO;IAC5C;IACA,OAAOJ;AACX;AAKW,SAASV,cAAcQ,IAAI;IAClC,OAAO,IAAIG,KAAKH,KAAKgB,WAAW,IAAIhB,KAAKY,QAAQ,IAAI,GAAG,GAAG,GAAG,GAAG;AACrE;AAKW,SAASrB,YAAYS,IAAI;IAChC,OAAO,IAAIG,KAAKH,KAAKgB,WAAW,IAAIhB,KAAKY,QAAQ,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACzE;AAKW,SAASf,aAAaG,IAAI;IACjC,OAAO,IAAIG,KAAKH,KAAKgB,WAAW,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG;AACvD;AAKW,SAASpB,WAAWI,IAAI;IAC/B,OAAO,IAAIG,KAAKH,KAAKgB,WAAW,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC3D;AAQW,SAASjB,SAASC,IAAI,EAAEiB,KAAK;IACpC,OAAOlC,UAAUiB,MAAMiB,QAAQjB,KAAKY,QAAQ;AAChD;AAIW,SAASzB,aAAa+B,KAAK,EAAEC,KAAK;IACzC,IAAI,CAACD,SAAS,CAACC,OAAO;QAClB,OAAO;IACX,OAAO,IAAI,CAACD,SAAS,CAACC,OAAO;QACzB,OAAO;IACX,OAAO;QACH,OAAOD,MAAMF,WAAW,OAAOG,MAAMH,WAAW,MAAME,MAAMN,QAAQ,OAAOO,MAAMP,QAAQ,MAAMM,MAAMZ,OAAO,OAAOa,MAAMb,OAAO;IACpI;AACJ;AAOW,SAASpB,gBAAgBgC,KAAK,EAAEC,KAAK;IAC5C,OAAO/B,qBAAqB8B,SAAS9B,qBAAqB+B;AAC9D;AAWW,SAAS9B,kBAAkBW,IAAI,EAAEoB,aAAa,EAAEC,cAAc,EAAEC,YAAY,EAAEC,wBAAwB,CAAC;IAC9G,MAAMC,aAAa,EAAE;IACrB,IAAIC;IACJ,IAAIC,UAAU;IACd,IAAI,CAACJ,cAAc;QACfA,eAAe;YACXK,oBAAS,CAACC,MAAM;YAChBD,oBAAS,CAACE,OAAO;YACjBF,oBAAS,CAACG,SAAS;YACnBH,oBAAS,CAACI,QAAQ;YAClBJ,oBAAS,CAACK,MAAM;SACnB;IACL;IACAT,wBAAwBU,KAAKC,GAAG,CAACX,uBAAuB;IACxD,OAAOH;QACH,KAAKe,wBAAa,CAACC,GAAG;YAClBX,YAAYY,YAAYrC;YACxB0B,UAAU5C,QAAQ2C,WAAWF;YAC7B;QACJ,KAAKY,wBAAa,CAACG,IAAI;QACvB,KAAKH,wBAAa,CAACI,QAAQ;YACvBd,YAAYhC,mBAAmB4C,YAAYrC,OAAOqB;YAClDK,UAAU5C,QAAQ2C,WAAWjB,wBAAa,CAACC,aAAa;YACxD;QACJ,KAAK0B,wBAAa,CAACK,KAAK;YACpBf,YAAY,IAAItB,KAAKH,KAAKgB,WAAW,IAAIhB,KAAKY,QAAQ,IAAI;YAC1Dc,UAAU3C,UAAU0C,WAAW;YAC/B;QACJ;YACI,MAAM,IAAIgB,MAAM,wBAAwBrB;IAChD;IACA,mDAAmD;IACnD,IAAIsB,WAAWjB;IACf,GAAG;QACC,IAAIL,kBAAkBe,wBAAa,CAACI,QAAQ,EAAE;YAC1C,sCAAsC;YACtCf,WAAWmB,IAAI,CAACD;QACpB,OAAO,IAAIpB,aAAasB,OAAO,CAACF,SAASG,MAAM,QAAQ,CAAC,GAAG;YACvDrB,WAAWmB,IAAI,CAACD;QACpB;QACAA,WAAW5D,QAAQ4D,UAAU;IACjC,QAAQ,CAACvD,aAAauD,UAAUhB,SAAS;IACzC,OAAOF;AACX;AAMW,SAAS1B,mBAAmBE,IAAI,EAAE8C,SAAS;IAClD,KAAK,MAAMC,eAAeD,UAAU;QAChC,IAAI3D,aAAaa,MAAM+C,cAAc;YACjC,OAAO;QACX;IACJ;IACA,OAAO;AACX;AAQW,SAASpD,sBAAsBqD,YAAY,EAAE3B,cAAc,EAAE4B,eAAe,EAAEC,aAAa;IAClG,MAAMC,eAAeD,cAAclC,WAAW;IAC9C,MAAMoC,gBAAgBF,cAActC,QAAQ;IAC5C,IAAIyC,aAAa;IACjB,MAAMC,iBAAiB,IAAInD,KAAKgD,cAAcC,eAAeC;IAC7D,MAAME,iBAAiBF,aAAchC,CAAAA,iBAAiBb,wBAAa,CAACC,aAAa,GAAG,CAAA,IAAK+C,cAAcnC,gBAAgBiC,eAAeT,MAAM;IAC5I,IAAIY,iBAAiB,IAAItD,KAAKgD,cAAcC,eAAeG;IAC3DF,aAAaI,eAAenD,OAAO;IACnC,MAAMoD,aAAa,EAAE;IACrB,IAAI,IAAIC,IAAI,GAAGA,IAAIX,cAAcW,IAAI;QACjC,kCAAkC;QAClCD,WAAWf,IAAI,CAACjD,cAAc+D,gBAAgBpC,gBAAgB4B;QAC9DI,cAAc7C,wBAAa,CAACC,aAAa;QACzCgD,iBAAiB,IAAItD,KAAKgD,cAAcC,eAAeC;IAC3D;IACA,OAAOK;AACX;AAQW,SAAShE,cAAcM,IAAI,EAAEqB,cAAc,EAAE4B,eAAe;IACnE,uDAAuD;IACvD,MAAMW,cAAc;IACpB,OAAOX;QACH,KAAKY,0BAAe,CAACC,aAAa;YAC9B,OAAOC,sBAAsB/D,MAAMqB,gBAAgBb,wBAAa,CAACC,aAAa;QAClF,KAAKoD,0BAAe,CAACG,gBAAgB;YACjC,OAAOD,sBAAsB/D,MAAMqB,gBAAgBuC;QACvD;YACI,OAAOK,sBAAsBjE,MAAMqB;IAC3C;AACJ;AAMW,SAAS5B,mBAAmBO,IAAI,EAAEqB,cAAc;IACvD,IAAI6C,aAAa7C,iBAAiBrB,KAAK6C,MAAM;IAC7C,IAAIqB,aAAa,GAAG;QAChB,2FAA2F;QAC3FA,cAAc1D,wBAAa,CAACC,aAAa;IAC7C;IACA,OAAO3B,QAAQkB,MAAMkE;AACzB;AAMW,SAAS5E,iBAAiBU,IAAI,EAAEqB,cAAc;IACrD,MAAM8C,gBAAgB9C,iBAAiB,KAAK,IAAIA,iBAAiB,IAAIb,wBAAa,CAACC,aAAa,GAAG;IACnG,IAAIyD,aAAaC,gBAAgBnE,KAAK6C,MAAM;IAC5C,IAAIqB,aAAa,GAAG;QAChB,+FAA+F;QAC/FA,cAAc1D,wBAAa,CAACC,aAAa;IAC7C;IACA,OAAO3B,QAAQkB,MAAMkE;AACzB;AACA;;;;CAIC,GAAG,SAAS7B,YAAYrC,IAAI;IACzB,OAAO,IAAIG,KAAKH,KAAKgB,WAAW,IAAIhB,KAAKY,QAAQ,IAAIZ,KAAKM,OAAO;AACrE;AAGW,SAASlB,qBAAqBY,IAAI;IACzC,2GAA2G;IAC3G,sCAAsC;IACtC,OAAOA,KAAKM,OAAO,KAAMN,CAAAA,KAAKY,QAAQ,MAAM,CAAA,IAAMZ,CAAAA,KAAKgB,WAAW,MAAM,CAAA;AAC5E;AACA;;;;;;;CAOC,GAAG,SAAS+C,sBAAsB/D,IAAI,EAAEqB,cAAc,EAAE+C,gBAAgB;IACrE,MAAMC,YAAYC,aAAatE,QAAQ;IACvC,IAAIuE,MAAMvE,KAAK6C,MAAM,KAAKwB,YAAY7D,wBAAa,CAACC,aAAa;IACjE,MAAM+D,oBAAoB,IAAIrE,KAAKH,KAAKgB,WAAW,KAAK,GAAGyD,sBAAW,CAACC,QAAQ,EAAE;IACjF,MAAMC,aAAaL,aAAaE,qBAAqB;IACrD,IAAII,OAAO,AAACvD,CAAAA,iBAAiBkD,MAAM,IAAI/D,wBAAa,CAACC,aAAa,AAAD,IAAKD,wBAAa,CAACC,aAAa;IACjG,IAAImE,SAAS,KAAKA,QAAQR,kBAAkB;QACxCQ,QAAQpE,wBAAa,CAACC,aAAa;IACvC;IACA,IAAIoE,OAAOR,YAAYO;IACvB,IAAIC,OAAO,GAAG;QACVN,OAAOI,aAAanE,wBAAa,CAACC,aAAa;QAC/CmE,OAAO,AAACvD,CAAAA,iBAAiBkD,MAAM,IAAI/D,wBAAa,CAACC,aAAa,AAAD,IAAKD,wBAAa,CAACC,aAAa;QAC7F,IAAImE,SAAS,KAAKA,OAAO,KAAKR,kBAAkB;YAC5CQ,QAAQpE,wBAAa,CAACC,aAAa;QACvC;QACAoE,OAAOF,aAAaC;IACxB;IACA,OAAO3C,KAAK6C,KAAK,CAACD,OAAOrE,wBAAa,CAACC,aAAa,GAAG;AAC3D;AACA;;;;;;CAMC,GAAG,SAASwD,sBAAsBjE,IAAI,EAAEqB,cAAc;IACnD,MAAMkD,MAAMD,aAAatE,QAAQ;IACjC,MAAM4E,OAAO5E,KAAK6C,MAAM,KAAK0B,MAAM/D,wBAAa,CAACC,aAAa;IAC9D,MAAMoE,OAAO,AAACD,CAAAA,OAAOvD,iBAAiB,IAAIb,wBAAa,CAACC,aAAa,AAAD,IAAKD,wBAAa,CAACC,aAAa;IACpG,OAAOwB,KAAK6C,KAAK,CAAC,AAACP,CAAAA,MAAMM,IAAG,IAAKrE,wBAAa,CAACC,aAAa,GAAG;AACnE;AACA;;;;;;;;CAQC,GAAG,SAAS+C,cAAcnC,cAAc,EAAE0D,WAAW;IAClD,OAAO1D,mBAAmBM,oBAAS,CAACqD,MAAM,IAAID,cAAc1D,iBAAiB0D,cAAcvE,wBAAa,CAACC,aAAa,GAAGsE;AAC7H;AACA;;;;;CAKC,GAAG,SAAST,aAAatE,IAAI;IAC1B,MAAMiB,QAAQjB,KAAKY,QAAQ;IAC3B,MAAMqE,OAAOjF,KAAKgB,WAAW;IAC7B,IAAIkE,gBAAgB;IACpB,IAAI,IAAIvB,IAAI,GAAGA,IAAI1C,OAAO0C,IAAI;QAC1BuB,iBAAiBC,YAAYxB,IAAI,GAAGsB;IACxC;IACAC,iBAAiBlF,KAAKM,OAAO;IAC7B,OAAO4E;AACX;AACA;;;;;CAKC,GAAG,SAASC,YAAYlE,KAAK,EAAEgE,IAAI;IAChC,OAAO,IAAI9E,KAAK8E,MAAMhE,OAAO,GAAGX,OAAO;AAC3C"}