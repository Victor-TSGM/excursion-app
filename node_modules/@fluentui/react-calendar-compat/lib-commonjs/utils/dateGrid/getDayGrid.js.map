{"version":3,"sources":["getDayGrid.js"],"sourcesContent":["import { addDays, compareDates, getDateRangeArray, isInDateRangeArray } from '../dateMath/dateMath';\nimport { DAYS_IN_WEEK } from '../constants';\nimport { getDateRangeTypeToUse } from './getDateRangeTypeToUse';\nimport { getBoundedDateRange } from './getBoundedDateRange';\nimport { isRestrictedDate } from './isRestrictedDate';\n/**\n * Generates a grid of days, given the `options`.\n * Returns one additional week at the begining from the previous range\n * and one at the end from the future range\n * @param options - parameters to specify date related restrictions for the resulting grid\n */ export const getDayGrid = (options)=>{\n    const { selectedDate, dateRangeType, firstDayOfWeek, today, minDate, maxDate, weeksToShow, workWeekDays, daysToSelectInDayView, restrictedDates, markedDays } = options;\n    const restrictedDateOptions = {\n        minDate,\n        maxDate,\n        restrictedDates\n    };\n    const todaysDate = today || new Date();\n    const navigatedDate = options.navigatedDate ? options.navigatedDate : todaysDate;\n    let date;\n    if (weeksToShow && weeksToShow <= 4) {\n        // if showing less than a full month, just use date == navigatedDate\n        date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), navigatedDate.getDate());\n    } else {\n        date = new Date(navigatedDate.getFullYear(), navigatedDate.getMonth(), 1);\n    }\n    const weeks = [];\n    // Cycle the date backwards to get to the first day of the week.\n    while(date.getDay() !== firstDayOfWeek){\n        date.setDate(date.getDate() - 1);\n    }\n    // add the transition week as last week of previous range\n    date = addDays(date, -DAYS_IN_WEEK);\n    // a flag to indicate whether all days of the week are outside the month\n    let isAllDaysOfWeekOutOfMonth = false;\n    // in work week view if the days aren't contiguous we use week view instead\n    const selectedDateRangeType = getDateRangeTypeToUse(dateRangeType, workWeekDays, firstDayOfWeek);\n    let selectedDates = [];\n    if (selectedDate) {\n        selectedDates = getDateRangeArray(selectedDate, selectedDateRangeType, firstDayOfWeek, workWeekDays, daysToSelectInDayView);\n        selectedDates = getBoundedDateRange(selectedDates, minDate, maxDate);\n    }\n    let shouldGetWeeks = true;\n    for(let weekIndex = 0; shouldGetWeeks; weekIndex++){\n        const week = [];\n        isAllDaysOfWeekOutOfMonth = true;\n        for(let dayIndex = 0; dayIndex < DAYS_IN_WEEK; dayIndex++){\n            const originalDate = new Date(date.getTime());\n            const dayInfo = {\n                key: date.toString(),\n                date: date.getDate().toString(),\n                originalDate,\n                isInMonth: date.getMonth() === navigatedDate.getMonth(),\n                isToday: compareDates(todaysDate, date),\n                isSelected: isInDateRangeArray(date, selectedDates),\n                isInBounds: !isRestrictedDate(date, restrictedDateOptions),\n                isMarked: (markedDays === null || markedDays === void 0 ? void 0 : markedDays.some((markedDay)=>compareDates(originalDate, markedDay))) || false\n            };\n            week.push(dayInfo);\n            if (dayInfo.isInMonth) {\n                isAllDaysOfWeekOutOfMonth = false;\n            }\n            date.setDate(date.getDate() + 1);\n        }\n        // We append the condition of the loop depending upon the showSixWeeksByDefault prop.\n        shouldGetWeeks = weeksToShow ? weekIndex < weeksToShow + 1 : !isAllDaysOfWeekOutOfMonth || weekIndex === 0;\n        // we don't check shouldGetWeeks before pushing because we want to add one extra week for transition state\n        weeks.push(week);\n    }\n    return weeks;\n};\n"],"names":["getDayGrid","options","selectedDate","dateRangeType","firstDayOfWeek","today","minDate","maxDate","weeksToShow","workWeekDays","daysToSelectInDayView","restrictedDates","markedDays","restrictedDateOptions","todaysDate","Date","navigatedDate","date","getFullYear","getMonth","getDate","weeks","getDay","setDate","addDays","DAYS_IN_WEEK","isAllDaysOfWeekOutOfMonth","selectedDateRangeType","getDateRangeTypeToUse","selectedDates","getDateRangeArray","getBoundedDateRange","shouldGetWeeks","weekIndex","week","dayIndex","originalDate","getTime","dayInfo","key","toString","isInMonth","isToday","compareDates","isSelected","isInDateRangeArray","isInBounds","isRestrictedDate","isMarked","some","markedDay","push"],"mappings":";;;;+BAUiBA;;;eAAAA;;;0BAV4D;2BAChD;uCACS;qCACF;kCACH;AAMtB,MAAMA,aAAa,CAACC;IAC3B,MAAM,EAAEC,YAAY,EAAEC,aAAa,EAAEC,cAAc,EAAEC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAEC,YAAY,EAAEC,qBAAqB,EAAEC,eAAe,EAAEC,UAAU,EAAE,GAAGX;IAChK,MAAMY,wBAAwB;QAC1BP;QACAC;QACAI;IACJ;IACA,MAAMG,aAAaT,SAAS,IAAIU;IAChC,MAAMC,gBAAgBf,QAAQe,aAAa,GAAGf,QAAQe,aAAa,GAAGF;IACtE,IAAIG;IACJ,IAAIT,eAAeA,eAAe,GAAG;QACjC,oEAAoE;QACpES,OAAO,IAAIF,KAAKC,cAAcE,WAAW,IAAIF,cAAcG,QAAQ,IAAIH,cAAcI,OAAO;IAChG,OAAO;QACHH,OAAO,IAAIF,KAAKC,cAAcE,WAAW,IAAIF,cAAcG,QAAQ,IAAI;IAC3E;IACA,MAAME,QAAQ,EAAE;IAChB,gEAAgE;IAChE,MAAMJ,KAAKK,MAAM,OAAOlB,eAAe;QACnCa,KAAKM,OAAO,CAACN,KAAKG,OAAO,KAAK;IAClC;IACA,yDAAyD;IACzDH,OAAOO,IAAAA,iBAAO,EAACP,MAAM,CAACQ,uBAAY;IAClC,wEAAwE;IACxE,IAAIC,4BAA4B;IAChC,2EAA2E;IAC3E,MAAMC,wBAAwBC,IAAAA,4CAAqB,EAACzB,eAAeM,cAAcL;IACjF,IAAIyB,gBAAgB,EAAE;IACtB,IAAI3B,cAAc;QACd2B,gBAAgBC,IAAAA,2BAAiB,EAAC5B,cAAcyB,uBAAuBvB,gBAAgBK,cAAcC;QACrGmB,gBAAgBE,IAAAA,wCAAmB,EAACF,eAAevB,SAASC;IAChE;IACA,IAAIyB,iBAAiB;IACrB,IAAI,IAAIC,YAAY,GAAGD,gBAAgBC,YAAY;QAC/C,MAAMC,OAAO,EAAE;QACfR,4BAA4B;QAC5B,IAAI,IAAIS,WAAW,GAAGA,WAAWV,uBAAY,EAAEU,WAAW;YACtD,MAAMC,eAAe,IAAIrB,KAAKE,KAAKoB,OAAO;YAC1C,MAAMC,UAAU;gBACZC,KAAKtB,KAAKuB,QAAQ;gBAClBvB,MAAMA,KAAKG,OAAO,GAAGoB,QAAQ;gBAC7BJ;gBACAK,WAAWxB,KAAKE,QAAQ,OAAOH,cAAcG,QAAQ;gBACrDuB,SAASC,IAAAA,sBAAY,EAAC7B,YAAYG;gBAClC2B,YAAYC,IAAAA,4BAAkB,EAAC5B,MAAMY;gBACrCiB,YAAY,CAACC,IAAAA,kCAAgB,EAAC9B,MAAMJ;gBACpCmC,UAAU,AAACpC,CAAAA,eAAe,QAAQA,eAAe,KAAK,IAAI,KAAK,IAAIA,WAAWqC,IAAI,CAAC,CAACC,YAAYP,IAAAA,sBAAY,EAACP,cAAcc,WAAU,KAAM;YAC/I;YACAhB,KAAKiB,IAAI,CAACb;YACV,IAAIA,QAAQG,SAAS,EAAE;gBACnBf,4BAA4B;YAChC;YACAT,KAAKM,OAAO,CAACN,KAAKG,OAAO,KAAK;QAClC;QACA,qFAAqF;QACrFY,iBAAiBxB,cAAcyB,YAAYzB,cAAc,IAAI,CAACkB,6BAA6BO,cAAc;QACzG,0GAA0G;QAC1GZ,MAAM8B,IAAI,CAACjB;IACf;IACA,OAAOb;AACX"}