{"version":3,"sources":["findAvailableDate.js"],"sourcesContent":["import { isRestrictedDate } from './isRestrictedDate';\nimport { isAfterMaxDate } from './isAfterMaxDate';\nimport { isBeforeMinDate } from './isBeforeMinDate';\nimport { compareDatePart, addDays } from '../dateMath/dateMath';\n/**\n * Returns closest available date given the restriction `options`, or undefined otherwise\n * @param options - list of search options\n */ export const findAvailableDate = (options)=>{\n    const { targetDate, initialDate, direction, ...restrictedDateOptions } = options;\n    let availableDate = targetDate;\n    // if the target date is available, return it immediately\n    if (!isRestrictedDate(targetDate, restrictedDateOptions)) {\n        return targetDate;\n    }\n    while(compareDatePart(initialDate, availableDate) !== 0 && isRestrictedDate(availableDate, restrictedDateOptions) && !isAfterMaxDate(availableDate, restrictedDateOptions) && !isBeforeMinDate(availableDate, restrictedDateOptions)){\n        availableDate = addDays(availableDate, direction);\n    }\n    if (compareDatePart(initialDate, availableDate) !== 0 && !isRestrictedDate(availableDate, restrictedDateOptions)) {\n        return availableDate;\n    }\n    return undefined;\n};\n"],"names":["findAvailableDate","options","targetDate","initialDate","direction","restrictedDateOptions","availableDate","isRestrictedDate","compareDatePart","isAfterMaxDate","isBeforeMinDate","addDays","undefined"],"mappings":";;;;+BAOiBA;;;eAAAA;;;kCAPgB;gCACF;iCACC;0BACS;AAI9B,MAAMA,oBAAoB,CAACC;IAClC,MAAM,EAAEC,UAAU,EAAEC,WAAW,EAAEC,SAAS,EAAE,GAAGC,uBAAuB,GAAGJ;IACzE,IAAIK,gBAAgBJ;IACpB,yDAAyD;IACzD,IAAI,CAACK,IAAAA,kCAAgB,EAACL,YAAYG,wBAAwB;QACtD,OAAOH;IACX;IACA,MAAMM,IAAAA,yBAAe,EAACL,aAAaG,mBAAmB,KAAKC,IAAAA,kCAAgB,EAACD,eAAeD,0BAA0B,CAACI,IAAAA,8BAAc,EAACH,eAAeD,0BAA0B,CAACK,IAAAA,gCAAe,EAACJ,eAAeD,uBAAuB;QACjOC,gBAAgBK,IAAAA,iBAAO,EAACL,eAAeF;IAC3C;IACA,IAAII,IAAAA,yBAAe,EAACL,aAAaG,mBAAmB,KAAK,CAACC,IAAAA,kCAAgB,EAACD,eAAeD,wBAAwB;QAC9G,OAAOC;IACX;IACA,OAAOM;AACX"}